{"version":3,"sources":["Main/Toolbar/Toolbar.jsx","Main/sortingAlgorithms.js","Main/SortingVisualizer/SortingVisualizer.jsx","Main/Main.jsx","Main/helperFunctions.js","App.js","serviceWorker.js","index.js"],"names":["Toolbar","props","handleNoOfBarChange","bind","document","getElementById","value","innerHTML","evt","target","this","resetArray","Navbar","className","variant","Brand","href","Collapse","id","Nav","type","min","max","step","disabled","onChange","handleAnimationSpeedChange","Form","inline","rel","React","Component","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSortHelper","pi","pivot","temp","doPartition","getHeapSortAnimations","heapify","heapSortHelper","largest","left","right","SortingVisualizer","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","animationSpeed","newHeight","height","changeAnimations","swapped","bubbleSortHelper","getBubbleSortAnimations","maxValue","map","idx","key","opacity","width","Button","onClick","mergeSort","quickSort","heapSort","bubbleSort","Main","minValue","state","noOfArrayBars","random","setState","parseInt","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7928a63f.chunk.js","sourcesContent":["import React from 'react';\nimport {Form, Nav, Navbar} from 'react-bootstrap';\nimport './Toolbar.css';\n\n\nexport default class Toolbar extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleNoOfBarChange = this.handleNoOfBarChange.bind(this);\n  }\n\n  componentDidMount() {\n    document.getElementById('sliderAnimationSpeed').value = 10;\n    document.getElementById('sliderNoOfBars').value = 50;\n    document.getElementById('noOfBarValue').innerHTML = '50';\n    document.getElementById('animationSpeedValue').innerHTML = '10';\n  }\n\n  handleNoOfBarChange(evt) {\n    document.getElementById('noOfBarValue').innerHTML = evt.target.value;\n    this.props.resetArray(evt.target.value);\n  }\n\n  render() {\n    const isRunning = false;\n\n    return (\n      <Navbar className=\"color-nav\" variant=\"light\">\n        <Navbar.Brand href=\"#home\">Sorting Algorithms Visualizer</Navbar.Brand>\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <div className=\"separator\">\n\n            </div>\n            <div className=\"sliderContainer\">\n              <input\n                id=\"sliderNoOfBars\"\n                type=\"range\"\n                min=\"5\"\n                max=\"200\"\n                step=\"1\"\n                disabled={isRunning ? 'disabled' : null}\n                onChange={this.handleNoOfBarChange}\n              />\n              <p>Number of Bars: <span id=\"noOfBarValue\">\n\n              </span>\n              </p>\n            </div>\n            <div className=\"separator\">\n\n            </div>\n            <div className=\"sliderContainer\">\n              <input\n                id=\"sliderAnimationSpeed\"\n                type=\"range\"\n                min=\"0\"\n                max=\"50\"\n                step=\"1\"\n                disabled={isRunning ? 'disabled' : null}\n                onChange={this.props.handleAnimationSpeedChange}\n              />\n              <p>Animation Speed: <span id=\"animationSpeedValue\">\n\n              </span>\n              </p>\n            </div>\n          </Nav>\n          <Form inline>\n              <span>Updated by&nbsp;\n                <a href=\"https://github.com/mustafasencer\"\n                   target=\"_blank\" rel=\"noopener noreferrer\">mustafasencer</a>\n              </span>\n          </Form>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n","export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nexport function getHeapSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  heapSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  bubbleSortHelper(array, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction quickSortHelper(mainArray, startIdx, endIdx, animations) {\n  if (startIdx < endIdx) {\n    let pi = doPartition(mainArray, startIdx, endIdx, animations);\n    quickSortHelper(mainArray, startIdx, pi - 1, animations);\n    quickSortHelper(mainArray, pi + 1, endIdx, animations);\n  }\n}\n\nfunction heapSortHelper(mainArray, startIdx, endIdx, animations) {\n  let length = mainArray.length;\n  for (let i = length / 2 - 1; i >= 0; i--) {\n    heapify(mainArray, length, i, animations);\n  }\n  for (let i = length - 1; i >= 0; i--) {\n    animations.push([i, 0]);\n    animations.push([i, 0]);\n    animations.push([i, mainArray[0]]);\n    animations.push([0, i]);\n    animations.push([0, i]);\n    animations.push([0, mainArray[i]]);\n    let temp = mainArray[i];\n    mainArray[i] = mainArray[0];\n    mainArray[0] = temp;\n\n    heapify(mainArray, i, 0, animations);\n  }\n}\n\nfunction bubbleSortHelper(mainArray, animations) {\n  let length = mainArray.length;\n  for (let i = 0; i < length; i++) {\n    let swapped = false;\n\n    for (let j = 0; j < length - i - 1; j++) {\n      if (mainArray[j] > mainArray[j + 1]) {\n        animations.push([j, j + 1]);\n        animations.push([j, j + 1]);\n        animations.push([j, mainArray[j + 1]]);\n        animations.push([j + 1, j]);\n        animations.push([j + 1, j]);\n        animations.push([j + 1, mainArray[j]]);\n        let temp = mainArray[j];\n        mainArray[j] = mainArray[j + 1];\n        mainArray[j + 1] = temp;\n        swapped = true;\n      }\n    }\n\n    if (swapped === false) {\n      break;\n    }\n  }\n}\n\nfunction doPartition(mainArray, startIdx, endIdx, animations) {\n  let i = startIdx - 1;\n  let pivot = mainArray[endIdx];\n  for (let j = startIdx; j < endIdx; j++) {\n    if (mainArray[j] < pivot) {\n      i++;\n      animations.push([i, j]);\n      animations.push([i, j]);\n      animations.push([i, mainArray[j]]);\n      animations.push([j, i]);\n      animations.push([j, i]);\n      animations.push([j, mainArray[i]]);\n      let temp = mainArray[i];\n      mainArray[i] = mainArray[j];\n      mainArray[j] = temp;\n    }\n  }\n  i++;\n  animations.push([i, endIdx]);\n  animations.push([i, endIdx]);\n  animations.push([i, mainArray[endIdx]]);\n  animations.push([endIdx, i]);\n  animations.push([endIdx, i]);\n  animations.push([endIdx, mainArray[i]]);\n  let temp = mainArray[i];\n  mainArray[i] = mainArray[endIdx];\n  mainArray[endIdx] = temp;\n  return i;\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nfunction heapify(mainArray, length, i, animations) {\n  let largest = i; // root\n  let left = 2 * i + 1;\n  let right = 2 * i + 2;\n\n  if (left < length && mainArray[largest] < mainArray[left]) {\n    largest = left;\n  }\n  if (right < length && mainArray[largest] < mainArray[right]) {\n    largest = right;\n  }\n\n  if (largest !== i) {\n    animations.push([i, largest]);\n    animations.push([i, largest]);\n    animations.push([i, mainArray[largest]]);\n    animations.push([largest, i]);\n    animations.push([largest, i]);\n    animations.push([largest, mainArray[i]]);\n    let temp = mainArray[i];\n    mainArray[i] = mainArray[largest];\n    mainArray[largest] = temp;\n\n    heapify(mainArray, length, largest, animations);\n  }\n\n}","import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms.js';\nimport {getQuickSortAnimations} from '../sortingAlgorithms.js';\nimport './SortingVisualizer.css';\nimport Button from 'react-bootstrap/Button';\nimport {Form} from 'react-bootstrap';\nimport {getBubbleSortAnimations, getHeapSortAnimations} from '../sortingAlgorithms';\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#282c34';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'yellow';\n\nexport default class SortingVisualizer extends React.Component {\n\n  changeAnimations(animations) {\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.props.animationSpeed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.props.animationSpeed);\n      }\n    }\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.props.array.array);\n    this.changeAnimations(animations);\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.props.array.array);\n    this.changeAnimations(animations);\n  }\n\n  heapSort() {\n    const animations = getHeapSortAnimations(this.props.array.array);\n    this.changeAnimations(animations);\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.props.array.array);\n    this.changeAnimations(animations);\n  }\n\n  render() {\n    const {array} = this.props.array;\n\n    return (\n      <div className=\"array-container\">\n        <Form className=\"array-form\">\n          <div className=\"array-bar-wrapper\"\n               style={{height: `${this.maxValue}px`}}>\n            {array.map((height, idx) => (\n              <div\n                className=\"array-bar\"\n                key={idx}\n                style={{\n                  backgroundColor: PRIMARY_COLOR,\n                  opacity: 0.5,\n                  height: `${height}px`,\n                  width: `${this.props.width}px`,\n                }}>\n                {this.props.width > 20 ?\n                  <span className=\"spanHeight\">{height}</span>\n                  : <span>\n\n                  </span>\n                }\n              </div>\n            ))}\n          </div>\n        </Form>\n        <Form className=\"button-container\">\n          <Button className=\"newArray\"\n                  onClick={() => this.props.resetArray(document.getElementById('noOfBarValue').innerHTML)}>Generate\n            New Array</Button>\n          <Button className=\"sortingAlg\" onClick={() => this.mergeSort()}>Merge Sort</Button>\n          <Button className=\"sortingAlg\" onClick={() => this.quickSort()}>Quick Sort</Button>\n          <Button className=\"sortingAlg\" onClick={() => this.heapSort()}>Heap Sort</Button>\n          <Button className=\"sortingAlg\" onClick={() => this.bubbleSort()}>Bubble Sort</Button>\n        </Form>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport Toolbar from './Toolbar/Toolbar';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport {randomIntFromInterval} from './helperFunctions';\n\n// Change this value for the number of bars (value) in the array.\nexport const NUMBER_OF_ARRAY_BARS = 50;\n\nexport default class Main extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.width = 7;\n    this.maxValue = 300;\n    this.minValue = 5;\n    this.animationSpeed = 2.0;\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray(NUMBER_OF_ARRAY_BARS);\n  }\n\n  resetArray(noOfArrayBars) {\n    const array = [];\n    this.width = 700 / noOfArrayBars;\n    for (let i = 0; i < noOfArrayBars; i++) {\n      array.push(randomIntFromInterval(this.minValue, this.maxValue));\n    }\n    this.setState({array});\n  }\n\n  handleAnimationSpeedChange(evt) {\n    document.getElementById('animationSpeedValue').innerHTML = evt.target.value;\n    this.animationSpeed = parseInt(evt.target.value);\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"array-container\">\n        <Toolbar resetArray={this.resetArray.bind(this)}\n                 handleAnimationSpeedChange={this.handleAnimationSpeedChange.bind(this)}/>\n        <SortingVisualizer resetArray={this.resetArray.bind(this)}\n                           array={this.state}\n                           width={this.width}\n                           animationSpeed={this.animationSpeed}\n                           minValue={this.minValue}\n                           maxValue={this.maxValue}/>\n      </div>\n    );\n  }\n}\n","export function randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React from 'react';\nimport './App.css';\nimport Main from './Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}